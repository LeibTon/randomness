{"version":3,"sources":["components/markdown.jsx","components/armodel.jsx","components/final.jsx","components/main.jsx","components/content.jsx","components/loading.jsx","App.js","index.js"],"names":["MarkdownRender","props","newProps","plugins","RemarkMathPlugin","renderers","math","Node","formula","value","inlineMath","inline","Provider","input","Armodel","getMarkdown","model","result","round","toString","i","length","className","input_train_error","input_test_error","source","input_p","random_test_error","random_train_error","random_p","Conclusion","style","border","fontWeight","borderLeft","padding","textDecoration","color","href","fontSize","textAlign","fontFamily","role","aria-label","Main","useState","setInput","r_value","min","tem","resource","training_part","Math","abs","option","scales","yAxes","ticks","max","stepSize","dataset","label","data","map","x","fill","pointRadius","borderColor","borderWidth","lineTension","data1","labels","datasets","options","data2","data3","data4","input_original","join","random_original","input_length","train_length","clear","marginTop","type","onChange","event","target","marginLeft","parseInt","Content","Loading","width","src","alt","App","random","setRandom","error1","seterror1","error","setError","content","setContent","setResource","method","String","name","placeholder","string","check","onClick","preventDefault","requestOptions","headers","body","JSON","stringify","fetch","then","response","json","console","log","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a531c8c0.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactMarkdown from 'react-markdown';\nimport MathJax from 'react-mathjax';\nimport RemarkMathPlugin from 'remark-math';\n\nfunction MarkdownRender(props) {\n    const newProps = {\n        ...props,\n        plugins: [\n          RemarkMathPlugin,\n        ],\n        renderers: {\n          ...props.renderers,\n          math: (props) => \n            <MathJax.Node formula={props.value} />,\n          inlineMath: (props) =>\n            <MathJax.Node inline formula={props.value} />\n        }\n      };\n      return (\n        <MathJax.Provider input=\"tex\">\n            <ReactMarkdown {...newProps} />\n        </MathJax.Provider>\n      );\n}\n\nexport default MarkdownRender;\n","import React from \"react\";\nimport MarkDownRender from \"./markdown\";\nimport {round} from \"mathjs\"\nfunction Armodel(props)\n{\nfunction getMarkdown(model)\n{\nvar result = \"$x_{k+1}$ $=$ $\"+round(model[0],3).toString()+\"$ $+$ $\"+round(model[1],3).toString()+\"$ $*$ $x_{k}$ \";\nfor(var i=2;i<model.length;i++)\n{\nresult+=\"$+$ $\";\nresult+=round(model[i],3).toString()\nresult+=\"$ $*$ $x_{k-\"\nresult+=(i-1).toString()\nresult+=\"}$ \";\n}\nreturn result;\n}\nreturn <div className=\"armodel-container\">\n<div className=\"token-head\">Human Generated Data:</div>\n<div>\n<span className = \"token\">Train Error:</span>\n<span className = \"token_des\">{round(props.input.input_train_error,4)}</span>\n</div><div><span className = \"token\">Test Error:</span>\n<span className = \"token_des\">{round(props.input.input_test_error,4)}</span>\n</div><div><span className=\"token\">AR Model: </span><span className = \"token_des special_markdown\">\n<MarkDownRender source ={getMarkdown(props.input.input_p)} /></span>\n</div><div><span className = \"token\">Overfitting:</span>\n<span className = \"token_des\">{props.input.random_test_error-props.input.random_train_error>0.4 ? \"Yes\": \"No\"}</span>\n</div>\n<div className=\"token-head\">Machine Generated Data:</div>\n<div>\n<span className = \"token\">Train Error:</span>\n<span className = \"token_des\">{round(props.input.random_train_error,4)}</span>\n</div><div><span className = \"token\">Test Error:</span>\n<span className = \"token_des\">{round(props.input.random_test_error,4)}</span>\n</div><div><span className=\"token\">AR Model: </span><span className = \"token_des special_markdown\">\n<MarkDownRender source ={getMarkdown(props.input.random_p)} /></span>\n</div><div><span className = \"token\">Overfitting:</span>\n<span className = \"token_des\">{props.input.random_test_error-props.input.random_train_error>0.35? \"Yes\": \"No\"}</span>\n</div>\n<span className = \"token collll\">{props.input.random_test_error<props.input.input_test_error?\"Machine \": \"Human \"}Generated Data is fitted better in {props.input[\"r-value\"]} order AR model. As per this model, {props.input.random_test_error > props.input.input_test_error?\"Machine \": \"Human \"} is good at generating random numbers.</span>\n</div>\n}\n\n\nexport default Armodel;\n","import React from \"react\";\n\nfunction Conclusion(){\n\nreturn <div>\n<h3 className=\"heading_for_down\">Conclusion</h3>\n<p className=\"plot-details\" style={{border: \"none\"}}>Truly random sequences of numbers have no structure and should not be predictable by an AR or any other models.</p>\n<p className=\"plot-details\" style={{border: \"none\"}}>However, humans are notoriously terrible at generating random sequences of numbers! (Other animals are no better...)</p>\n<p className=\"plot-details\" style={{fontWeight: \"bolder\",border: \"none\"}}>\nIn Summary:\n<br />\n\"I can't believe I'm so predictable!\"\n</p>\n<h3 className=\"heading_for_down\">Wanna Learn More!!</h3>\n<div style={{borderLeft: \"2px solid lightgreen\",padding: \"5px 15px\"}}>\n<p><a style={{textDecoration: \"none\",color: \"purple\"}} href=\"https://www.youtube.com/playlist?list=PLkBQOLLbi18NamPEHJnnljSC-4hWGvsJK\">Linear Systems by Neuromatch Academy</a></p>\n<p><a style={{textDecoration: \"none\",color: \"purple\"}} href=\"https://machinelearningmastery.com/autoregression-models-time-series-forecasting-python/\">Time Series Forecasting using AR models (Python)</a></p>\n</div>\n<p className=\"plot-details\" style={{border: \"none\",fontSize: \"1rem\"}}>This Webpage is based on contents and code from <a style={{textDecoration: \"none\",color: \"purple\"}} href=\"https://colab.research.google.com/github/NeuromatchAcademy/course-content/blob/master/tutorials/W2D2_LinearSystems/student/W2D2_Tutorial4.ipynb\">this </a>notebook by <a style={{textDecoration: \"none\",color: \"purple\"}} href=\"https://www.neuromatchacademy.org/\">Neuromatch Academy</a>. We don't have any right over the content and the content is used only for educational purpose.</p>\n<p style={{textAlign:\"center\", fontFamily: \"Playfair Display\"}}>Made with <span role=\"img\" aria-label=\"love\" style={{color:\"red\"}}>❤️</span> by Aditya Prakash</p>\n</div>\n\n}\n\nexport default Conclusion\n","import React,{useState} from \"react\"\nimport {Line} from \"react-chartjs-2\";\nimport Armodel from \"./armodel\";\nimport Conclusion from \"./final\";\n\n\nfunction Main(props){\n\n   var [input, setInput] = useState(\"NULL\");\n   if(input===\"NULL\")\n{\nvar r_value=1;\nvar min =100;\nfor(var i=0;i<20;i++)\n{\nvar tem = props.resource.training_part[i]\nif(Math.abs(tem.input_test_error-tem.input_train_error)<min)\n{\nmin = Math.abs(tem.input_test_error-tem.input_train_error)\nr_value = i+1;}\n}\nsetInput(r_value)\n}\n   function handleChange(event)\n{\n     var value = event.target.value;\n     setInput(value);\n}\n\n   var option = {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    max: 1.0,\n                min: 0,\n                stepSize: 0.1\n                }\n            }]\n        }\n    }\n   var dataset = [\n        {\n          label: \"Human Generated Data(Train)\",\n          data: props.resource.training_part.map(x=>x.input_train_error),\n          fill: 'none',\n          pointRadius: 2,\n          borderColor: 'red',\n          borderWidth: 1.7,\n          lineTension: 0\n        },\n        {\n          label: \"Human Generated Data(Test)\",\n          data: props.resource.training_part.map(x=>x.input_test_error),\n          fill: 'none',\n          pointRadius: 2,\n          borderColor: 'blue',\n          borderWidth: 1,\n          lineTension: 0\n        },\n        {\n          label: \"Machine Generated Data(Train)\",\n          data: props.resource.training_part.map(x=>x.random_train_error),\n          fill: 'none',\n          pointRadius: 2,\n          borderColor: 'green',\n          borderWidth: 1,\n          lineTension: 0\n        },\n        {\n          label: \"Machine Generated Data(Test)\",\n          data: props.resource.training_part.map(x=>x.random_test_error),\n          fill: 'none',\n          pointRadius: 2,\n          borderColor: 'yellow',\n          borderWidth: 1,\n          lineTension: 0\n        }\n      ]\n    var data1 = {\n      labels: props.resource[\"r-values\"],\n      datasets: [dataset[0],dataset[1]],\n      options: option\n    }\n\n   var data2 = {\n    labels: props.resource[\"r-values\"],\n      datasets: [dataset[2],dataset[3]],\n      options: option}\n   \n   var data3 = {\nlabels: props.resource[\"r-values\"],\n      datasets: [dataset[0],dataset[2]]}\n   \n   var data4 = {\nlabels: props.resource[\"r-values\"],\n      datasets: [dataset[1],dataset[3]],\n      options: option}\n\n\n    return <div>\n<div>\n<div className=\"plot-input-details\">\n<h4 className=\"heading_for_down\">Data Struture</h4>\n<table>\n<tbody>\n<tr>\n<td>Human Generated Data:</td>\n<td className=\"break\">{props.resource.input_original.join(\"\")}</td>\n</tr>\n<tr>\n<td>Machine Generated Data: </td>\n<td className=\"break\">{props.resource.random_original.join(\"\")}</td>\n</tr>\n<tr>\n<td>Length of Data:</td>\n<td className=\"break\">{props.resource.input_length}</td>\n</tr>\n<tr>\n<td>Length Used For Training:</td>\n<td className=\"break\">{props.resource.train_length}</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n<h4 className=\"heading_for_down\">Visualisation Using Graphs</h4>\n<p className=\"plot-details\"> Here We Compare the peformance of AR models for differet orders over train and test data for your input and computer generated data. <br />\nThis Visualisation helps us to conclude which model is overfitting and which on is capturing the pattern properly.\n</p>\n<div className = \"chart-plot\"><p className = \"plot-title\">Plot of Train vs Test Errors for Human Generated Data</p><Line data = {data1} /> </div>\n<div className = \"chart-plot\"><p className = \"plot-title\">Plot of Train vs Test Errors for Machine Generated Data</p><Line data = {data2} /> </div>\n</div>\n<div style={{clear: \"left\"}} ></div>\n<div>\n<p className = \"plot-details\">\nHere we are comparing the fitting of your input and computer generated data for different order-AR models to check which one is good at generating randomness.\n</p> \n<div className = \"chart-plot\"><p className = \"plot-title\">Plot of Train Error for Human vs Machine Generated</p><Line data = {data3} /> </div>\n<div className = \"chart-plot\"><p className = \"plot-title\">Plot of Test Error for Human vs Machine Generated</p><Line data = {data4} /> </div>\n</div>\n<div style={{clear: \"left\"}} ></div>\n<div style={{marginTop: \"10px\"}}>\n<input className=\"ar-model-input\" type=\"text\" onChange= {handleChange}value={input} /><span className=\"heading_for_down\" style={{marginLeft: \"2px\"}}>- order Autoregressive model</span>\n</div>\n{parseInt(input)>0 && parseInt(input)<21 ? <Armodel input = {props.resource.training_part[parseInt(input)-1]}/> : null}\n<Conclusion />\n</div>\n}\n\n\n\nexport default Main;\n","import React from \"react\";\nimport MarkDownRender from \"./markdown\";\nfunction Content(){\n  \n  return <div style={{padding: \"5px 20px\"}}>\n   <h1 className=\"content-heading\">So What It is?</h1>\n   <p className = \"content-description\"> This is basically a fun experiment just to check how random you can be and then compare your randomness with that of a machine.<br />Here we are trying to fit your input on a model so that we can predict what your future inputs can be. There are many models available for doing this, but we will use Autoregresive models.  You will learn further what are auto regresive models and why we are using this here. <br /> Let's check if machine defeats humans even in creating chaos.</p>\n<p className = \"content-subheading\">What are Auto Regressive Models?</p>\n<p className = \"content-description\">\nYou certainly would have come across these kind of equations in mathematics, <MarkDownRender source=\"$x_{k+1} = \\lambda x_{k}$\" /> This is called an <strong>autoregressive model</strong>, where auto means self. It is a regression of the time series on itself from the past.\nThe equation as written above is only a function of itself from one step in the past, so we call it a <em>first order autoregressive model</em>.\n<br />\nHigh Order autoregression models a future time point based on more than one points in the past.\n<MarkDownRender source = \"In one dimension, we can write such an order- $r$ model as\" />\n<MarkDownRender source = \"$x_{k+1} = \\alpha_0 + \\alpha_1 x_k + \\alpha_2 x_{k-1} + \\alpha_3 x_{k-2} + \\dots + \\alpha_{r+1} x_{k-r}$\" />\n<MarkDownRender\nsource = \"where the $\\alpha$'s are the $r+1$ coefficients to be fit to the data available.\" />\n</p>\n<p className = \"content-subheading\"> Why we use Auto Regressive Models?</p>\n<p className = \"content-description\"> These models are useful to account for some <strong><em>history dependencies</em></strong> in the trajectory of timeseries. We will then build higher-order AR models to see if we can identify predictable patterns in the time-history of digits you input.</p>\n<p className = \"content-subheading\">What is going behind the scene?</p>\n<p className = \"content-description\">\nYou enter a sequence of 1's and 0's. The machine then generates a random sequence of 1's and 0's of same length. After that we divide the sequence into train and test data. The train data is used to fit the model and the test one to test the accuracy of the model.\n<MarkDownRender\nsource = \"We fit the train data on order -$r$ models where $r$ ranges from $1-20$.\" /> And then check the accuracy of each model over test data to get the best model out of then.\n</p>\n<p className = \"content-description explore\">\nLet's explore the result.</p>\n</div>\n}\n\n\n\nexport default Content;\n","import React from \"react\";\n\nfunction Loading(){\n  return <div style={{width: \"100%\", textAlign: \"center\"}}><img src=\"infinity.gif\" alt=\"Loading...\"/></div>\n}\n\nexport default Loading\n","import React,{useState} from 'react';\nimport Main from \"./components/main\"\nimport Content from \"./components/content\"\nimport Loading from \"./components/loading\"\n\n\nfunction App() {\n  let [random,setRandom] = useState(\"\");\n  let [error1,seterror1] = useState(\"\");\n  let [error, setError] = useState(\"\");\n  let [content, setContent] = useState(false);\n  let [resource,setResource] = useState()\n  function check(string)\n  {\n    for(var i=0;i<string.length;i++)\n    {\n      if(string[i]!=='0' && string[i]!=='1')\n      return false;\n    }\n    return true;\n  }\n  function handleChange(event)\n  {\n    setError(\"\");\n    var value = event.target.value;\n    if(!check(value))\n    {\n      seterror1(\"You must only enter 0 and 1.\")\n    }\n    else{\n      seterror1(\"\")\n    setRandom(value)\n  }\n\n  }\n\n  function handleClick(event)\n  {\n    event.preventDefault();\n    if(random.length<75)\n    {\n      setError(\"You must input atleast 75 characters.\")\n    }\n    else\n    {\n      setContent(true);\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\"random\": random,\"r\":21,\"part\":4})\n      };\n      fetch(\"https://projectflaskserver.herokuapp.com/project/random_experiment/\", requestOptions)\n        .then((response) => response.json())\n        .then(data=> {\n          console.log(data)\n          setResource(data)\n        })\n        .catch(err=> {\n          setError(\"Server side Error! Please try Again.\")\n        })\n      }\n\n  }\n  return (\n    <div className=\"main-container\">\n    <h1 className=\"heading_of_page\">How Random You Can Be?</h1>\n    <form className=\"input-form\" method=\"post\">\n    <div className=\"input-details\"><span className = \"total-input\">{random.length>=75?\"Total Digits: \"+String(random.length):String(75-random.length)+\" Still Required !\"}</span><span className=\"input-error\">{error1}</span></div>\n        <input type=\"text\" name=\"random\" value={random} placeholder=\"Enter Random 0's and 1's\" onChange={handleChange} />\n    <div className=\"submit-details\" > <button type=\"submit\" name=\"button\" onClick={handleClick}>Submit</button> <span className=\"input-error\">{error}</span></div>\n    </form>\n    <div>\n    {content && <Content />}\n    {resource?<Main resource= {resource} />: content? <Loading/ >: null}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}